type Query {
    machine(serial: ID!): Machine!
    searchMachines(having: MachineParams, notHaving: MachineParams): [Machine!]!
}

"""
MachineParams is a set of input parameters to search machines.
"""
input MachineParams {
    labels: [LabelInput!] = null
    racks: [Int!] = null
    roles: [String!] = null
    states: [MachineState!] = null
    minDaysBeforeRetire: Int = null
}

"""
LabelInput represents a label to search machines.
"""
input LabelInput {
    name: String!
    value: String!
}

"""
Machine represents a physical server in a datacenter rack.
"""
type Machine {
    serial: ID!
    labels: [Label!]
    rack: Int!
    indexInRack: Int!
    role: String!
    ipv4: [IPAddress!]!
    registerDate: DateTime!
    retireDate: DateTime!
    bmc: BMC!
    status: MachineStatus!
}

"""
Label represents an arbitrary key-value pairs.
"""
type Label {
    name: String!
    value: String!
}

"""
IPAddress represents an IPv4 or IPv6 address.
"""
scalar IPAddress

"""
DateTime represents a date and time value.
"""
scalar DateTime

"""
BMC represents a Baseboard Management Controller.
"""
type BMC {
    bmcType: String!
    ipv4: IPAddress!
}

"""
MachineStatus represents status of a Machine.
"""
type MachineStatus {
    state: MachineState!
    timestamp: DateTime!
    duration: Float!
}

"""
MachineState enumerates machine states.
"""
enum MachineState {
    UNINITIALIZED
    HEALTHY
    UNHEALTHY
    UNREACHABLE
    UPDATING
    RETIRING
    RETIRED
}
